package anypoint

import (
	"context"
	"io"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"

	env "github.com/mulesoft-anypoint/anypoint-client-go/env"
)

func resourceENV() *schema.Resource {
	return &schema.Resource{
		CreateContext: resourceENVCreate,
		ReadContext:   resourceENVRead,
		UpdateContext: resourceENVUpdate,
		DeleteContext: resourceENVDelete,
		Description: `
		Creates an ` + "`" + `environement` + "`" + ` for your ` + "`" + `org` + "`" + `.
		`,
		Schema: map[string]*schema.Schema{
			"last_updated": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: "The last time this resource has been updated locally.",
			},
			"id": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: "The unique id of this environment generated by the anypoint platform.",
			},
			"org_id": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: "The organization id where the environment is defined.",
			},
			"name": {
				Type:        schema.TypeString,
				Required:    true,
				Description: "The name of the environment",
			},
			"is_production": {
				Type:        schema.TypeBool,
				Computed:    true,
				Description: "True if the environment is a production environment",
			},
			"type": {
				Type:             schema.TypeString,
				Required:         true,
				ForceNew:         true,
				Description:      "The type of the environment: sandbox or production",
				ValidateDiagFunc: validation.ToDiagFunc(validation.StringInSlice([]string{"sandbox", "design", "production"}, true)),
			},
			"client_id": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: "The environment client id",
			},
		},
		Importer: &schema.ResourceImporter{
			StateContext: schema.ImportStatePassthroughContext,
		},
	}
}

func resourceENVCreate(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics
	pco := m.(ProviderConfOutput)
	orgid := d.Get("org_id").(string)
	authctx := getENVAuthCtx(ctx, &pco)
	body := newENVPostBody(d)
	//request env creation
	res, httpr, err := pco.envclient.DefaultApi.OrganizationsOrgIdEnvironmentsPost(authctx, orgid).EnvCore(*body).Execute()
	if err != nil {
		var details string
		if httpr != nil && httpr.StatusCode >= 400 {
			defer httpr.Body.Close()
			b, _ := io.ReadAll(httpr.Body)
			details = string(b)
		} else {
			details = err.Error()
		}
		diags := append(diags, diag.Diagnostic{
			Severity: diag.Error,
			Summary:  "Unable to Create ENV",
			Detail:   details,
		})
		return diags
	}
	defer httpr.Body.Close()
	d.SetId(res.GetId())
	return resourceENVRead(ctx, d, m)
}

func resourceENVRead(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics
	pco := m.(ProviderConfOutput)
	envid := d.Id()
	orgid := d.Get("org_id").(string)
	authctx := getENVAuthCtx(ctx, &pco)
	if isComposedResourceId(envid) {
		orgid, envid = decomposeEnvId(d)
	}
	//perform request
	res, httpr, err := pco.envclient.DefaultApi.OrganizationsOrgIdEnvironmentsEnvironmentIdGet(authctx, orgid, envid).Execute()
	if err != nil {
		var details string
		if httpr != nil && httpr.StatusCode >= 400 {
			defer httpr.Body.Close()
			b, _ := io.ReadAll(httpr.Body)
			details = string(b)
		} else {
			details = err.Error()
		}
		diags := append(diags, diag.Diagnostic{
			Severity: diag.Error,
			Summary:  "Unable to read environment " + envid,
			Detail:   details,
		})
		return diags
	}
	defer httpr.Body.Close()
	//process data
	envinstance := flattenENVData(&res)
	//save in data source schema
	if err := setENVCoreAttributesToResourceData(d, envinstance); err != nil {
		diags := append(diags, diag.Diagnostic{
			Severity: diag.Error,
			Summary:  "Unable to set environment " + envid,
			Detail:   err.Error(),
		})
		return diags
	}
	d.SetId(envid)
	d.Set("org_id", orgid)
	return diags
}

func resourceENVUpdate(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics
	pco := m.(ProviderConfOutput)
	envid := d.Id()
	orgid := d.Get("org_id").(string)
	authctx := getENVAuthCtx(ctx, &pco)
	//check changes
	if d.HasChanges(getENVCoreAttributes()...) {
		body := newENVPutBody(d)
		//request env creation
		_, httpr, err := pco.envclient.DefaultApi.OrganizationsOrgIdEnvironmentsEnvironmentIdPut(authctx, orgid, envid).EnvCore(*body).Execute()
		if err != nil {
			var details string
			if httpr != nil && httpr.StatusCode >= 400 {
				defer httpr.Body.Close()
				b, _ := io.ReadAll(httpr.Body)
				details = string(b)
			} else {
				details = err.Error()
			}
			diags := append(diags, diag.Diagnostic{
				Severity: diag.Error,
				Summary:  "Unable to update environment " + envid,
				Detail:   details,
			})
			return diags
		}
		defer httpr.Body.Close()
		d.Set("last_updated", time.Now().Format(time.RFC850))
		return resourceENVRead(ctx, d, m)
	}
	return diags
}

func resourceENVDelete(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics
	pco := m.(ProviderConfOutput)
	envid := d.Id()
	orgid := d.Get("org_id").(string)
	authctx := getENVAuthCtx(ctx, &pco)
	//perform request
	httpr, err := pco.envclient.DefaultApi.OrganizationsOrgIdEnvironmentsEnvironmentIdDelete(authctx, orgid, envid).Execute()
	if err != nil {
		var details string
		if httpr != nil && httpr.StatusCode >= 400 {
			defer httpr.Body.Close()
			b, _ := io.ReadAll(httpr.Body)
			details = string(b)
		} else {
			details = err.Error()
		}
		diags := append(diags, diag.Diagnostic{
			Severity: diag.Error,
			Summary:  "Unable to delete environment " + envid,
			Detail:   details,
		})
		return diags
	}
	defer httpr.Body.Close()
	// d.SetId("") is automatically called assuming delete returns no errors, but
	// it is added here for explicitness.
	d.SetId("")

	return diags
}

/*
 * Creates a new ENV Core Struct from the resource data schema
 */
func newENVPostBody(d *schema.ResourceData) *env.EnvCore {
	body := env.NewEnvCoreWithDefaults()

	body.SetName(d.Get("name").(string))
	body.SetType(d.Get("type").(string))
	return body
}

/*
 * Creates a new ENV Core Struct from the resource data schema
 */
func newENVPutBody(d *schema.ResourceData) *env.EnvCore {
	body := env.NewEnvCoreWithDefaults()

	body.SetName(d.Get("name").(string))

	return body
}

/*
 * Returns authentication context (includes authorization header)
 */
func getENVAuthCtx(ctx context.Context, pco *ProviderConfOutput) context.Context {
	tmp := context.WithValue(ctx, env.ContextAccessToken, pco.access_token)
	return context.WithValue(tmp, env.ContextServerIndex, pco.server_index)
}

func decomposeEnvId(d *schema.ResourceData) (string, string) {
	s := DecomposeResourceId(d.Id())
	return s[0], s[1]
}
