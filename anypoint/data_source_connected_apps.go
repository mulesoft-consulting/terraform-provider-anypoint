package anypoint

import (
	"context"
	"io"
	"strconv"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	connected_app "github.com/mulesoft-anypoint/anypoint-client-go/connected_app"
)

func dataSourceConnectedApps() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceConnectedAppsRead,
		Description: `
		Reads all ` + "`" + `connected apps` + "`" + ` in any organization.
		`,
		Schema: map[string]*schema.Schema{
			"org_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: "The organization where to query the connected apps.",
			},
			"params": {
				Type:        schema.TypeSet,
				Optional:    true,
				Description: "The search parameters. Should only provide one occurrence of the block.",
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"search": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "A search string to use for case-insensitive partial matches on all object properties",
						},
						"offset": {
							Type:        schema.TypeInt,
							Optional:    true,
							Default:     0,
							Description: "Skip over a number of elements by specifying an offset value for the query.",
						},
						"limit": {
							Type:        schema.TypeInt,
							Optional:    true,
							Default:     25,
							Description: "Limit the number of elements in the response.",
						},
					},
				},
			},
			"clients": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: "List connected-apps result of the query",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "The unique id of this connected app generated by the anypoint platform.",
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "The name of the connected app.",
						},
						"secret": {
							Type:        schema.TypeString,
							Computed:    true,
							Sensitive:   true,
							Description: "The secret of the connected app.",
						},
						"user_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "The id of the user who owns the connected app",
						},
						"org_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "The organization id where the connected app's owner is defined.",
						},
						"grant_types": {
							Type:     schema.TypeList,
							Computed: true,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
							Description: `
							List of grant types. For "on its own behalf" connected apps the only allowed value is "client_credentials". 
							The allowed values for "on behalf of user" connected apps are: "authorization_code", "refresh_token",
							"password", and "urn:ietf:params:oauth:grant-type:jwt-bearer".
							`,
						},
						"redirect_uris": {
							Description: "Configure which URIs users may be directed to after authorization",
							Type:        schema.TypeList,
							Computed:    true,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
						"scope": {
							Description: "The scopes this connected app has authorization to work on",
							Type:        schema.TypeList,
							Computed:    true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"scope": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: "Scope",
									},
									"org_id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: "The id of the business group the scope is valid. Only required for particular scopes",
									},
									"env_id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: "The id of the environment the scope is valid. Only required for particular scopes",
									},
								},
							},
						},
						"public_keys": {
							Type:     schema.TypeList,
							Computed: true,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
							Description: `
							Application public key (PEM format). Used to validate JWT authorization grants.
							Required when grant type jwt-bearer is selected.
							`,
						},
						"client_uri": {
							Type:     schema.TypeString,
							Computed: true,
							Description: `
							Users can visit this URL to learn more about your app. Required for "on behalf of user" 
							connected apps
							`,
						},
						"enabled": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: "True if the connected app is enabled",
						},
						"audience": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "Who can use this application",
						},
						"policy_uri": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"tos_uri": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"cert_expiry": {
							Type:     schema.TypeString,
							Computed: true,
						},
					},
				},
			},
			"total": {
				Type:        schema.TypeInt,
				Description: "The total number of available results",
				Computed:    true,
			},
		},
	}
}

func dataSourceConnectedAppsRead(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics
	pco := m.(ProviderConfOutput)
	orgid := d.Get("org_id").(string)
	searchOpts := d.Get("params").(*schema.Set)
	authctx := getConnectedAppAuthCtx(ctx, &pco)
	//prepare request
	req := pco.connectedappclient.DefaultApi.GetAllConnectedApps(authctx).OrgId(orgid)
	req, errDiags := parseConnectedAppSearchOpts(req, searchOpts)
	if errDiags.HasError() {
		diags = append(diags, errDiags...)
		return diags
	}
	//execut request
	res, httpr, err := req.Execute()
	if err != nil {
		var details string
		if httpr != nil && httpr.StatusCode >= 400 {
			defer httpr.Body.Close()
			b, _ := io.ReadAll(httpr.Body)
			details = string(b)
		} else {
			details = err.Error()
		}
		diags = append(diags, diag.Diagnostic{
			Severity: diag.Error,
			Summary:  "Unable to get connected-apps for org " + orgid,
			Detail:   details,
		})
		return diags
	}
	defer httpr.Body.Close()
	//process data
	clients := flattenConnectedAppsResult(res.GetData())
	if err := d.Set("clients", clients); err != nil {
		diags = append(diags, diag.Diagnostic{
			Severity: diag.Error,
			Summary:  "Unable to set connected-apps result for org " + orgid,
			Detail:   err.Error(),
		})
		return diags
	}
	if err := d.Set("total", res.GetTotal()); err != nil {
		diags = append(diags, diag.Diagnostic{
			Severity: diag.Error,
			Summary:  "Unable to set total number of connected-apps for org " + orgid,
			Detail:   err.Error(),
		})
		return diags
	}
	d.SetId(strconv.FormatInt(time.Now().Unix(), 10))

	return diags
}

/*
Parses the api manager search options in order to check if the required search parameters are set correctly.
Appends the parameters to the given request
*/
func parseConnectedAppSearchOpts(req connected_app.DefaultApiGetAllConnectedAppsRequest, params *schema.Set) (connected_app.DefaultApiGetAllConnectedAppsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics
	if params.Len() == 0 {
		return req, diags
	}
	opts := params.List()[0]
	for k, v := range opts.(map[string]interface{}) {
		if k == "search" {
			req = req.Search(v.(string))
			continue
		}
		if k == "offset" {
			req = req.Offset(int32(v.(int)))
			continue
		}
		if k == "limit" {
			req = req.Limit(int32(v.(int)))
			continue
		}
	}
	return req, diags
}

func flattenConnectedAppsResult(collection []connected_app.ConnectedAppRespExt) []interface{} {
	if len(collection) > 0 {
		res := make([]interface{}, len(collection))
		for i, connapp := range collection {
			res[i] = flattenConnectedAppData(&connapp)
		}
		return res
	}
	return make([]interface{}, 0)
}
