package anypoint

import (
	"context"
	"io"
	"strconv"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/mulesoft-anypoint/anypoint-client-go/rolegroup"
)

func dataSourceRoleGroups() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceRoleGroupsRead,
		DeprecationMessage: `
		This resource is deprecated, please use ` + "`" + `teams` + "`" + `, ` + "`" + `team_members` + "`" + `team_roles` + "`" + ` instead.
		`,
		Description: `
		Reads all ` + "`" + `rolegroups` + "`" + ` available in your business group.
		`,
		Schema: map[string]*schema.Schema{
			"org_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: "The unique id of this role-group generated by the anypoint platform.",
			},
			"role_groups": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: "List of role-groups defined in the given organization",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"role_group_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "The role-group generated id",
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "the name of the role-group",
						},
						"external_names": {
							Type:     schema.TypeList,
							Computed: true,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
							Description: "List of external names of the role-group",
						},
						"description": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "The description of the role-group",
						},
						"org_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "The master orgnization id where the role-group is defined",
						},
						"editable": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: "Whether the role-group is editable",
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "The role-group creation date",
						},
						"updated_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "The role-group update date",
						},
						"user_count": {
							Type:     schema.TypeInt,
							Computed: true,
						},
					},
				},
			},
			"total": {
				Type:        schema.TypeInt,
				Computed:    true,
				Description: "Total number of results",
			},
		},
	}
}

func dataSourceRoleGroupsRead(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics
	pco := m.(ProviderConfOutput)
	orgid := d.Get("org_id").(string)
	authctx := getRoleGroupAuthCtx(ctx, &pco)
	//perform request
	res, httpr, err := pco.rolegroupclient.DefaultApi.OrganizationsOrgIdRolegroupsGet(authctx, orgid).Execute()
	if err != nil {
		var details string
		if httpr != nil && httpr.StatusCode >= 400 {
			defer httpr.Body.Close()
			b, _ := io.ReadAll(httpr.Body)
			details = string(b)
		} else {
			details = err.Error()
		}
		diags = append(diags, diag.Diagnostic{
			Severity: diag.Error,
			Summary:  "Unable to Get rolegroups",
			Detail:   details,
		})
		return diags
	}
	defer httpr.Body.Close()
	//process data
	data := res.GetData()
	rolegroups := flattenRoleGroupsData(&data)
	//save in data source schema
	if err := d.Set("role_groups", rolegroups); err != nil {
		diags = append(diags, diag.Diagnostic{
			Severity: diag.Error,
			Summary:  "Unable to set rolegroups",
			Detail:   err.Error(),
		})
		return diags
	}

	if err := d.Set("total", res.GetTotal()); err != nil {
		diags = append(diags, diag.Diagnostic{
			Severity: diag.Error,
			Summary:  "Unable to set total number rolegroups",
			Detail:   err.Error(),
		})
		return diags
	}

	d.SetId(strconv.FormatInt(time.Now().Unix(), 10))

	return diags
}

/*
* Transforms a set of rolegroups to the dataSourceRoleGroups schema
* @param rolegroups *[]rolegroup.Rolegroup the list of rolegroups
* @return list of generic items
 */
func flattenRoleGroupsData(rolegroups *[]rolegroup.Rolegroup) []interface{} {
	if rolegroups != nil && len(*rolegroups) > 0 {
		res := make([]interface{}, len(*rolegroups))

		for i, rolegroup := range *rolegroups {
			item := make(map[string]interface{})

			item["role_group_id"] = rolegroup.GetRoleGroupId()
			item["name"] = rolegroup.GetName()
			item["external_names"] = rolegroup.GetExternalNames()
			item["description"] = rolegroup.GetDescription()
			item["org_id"] = rolegroup.GetOrgId()
			item["editable"] = rolegroup.GetEditable()
			item["created_at"] = rolegroup.GetCreatedAt()
			item["updated_at"] = rolegroup.GetUpdatedAt()
			if val, ok := rolegroup.GetUserCountOk(); ok {
				item["user_count"] = val
			}

			res[i] = item
		}
		return res
	}
	return make([]interface{}, 0)
}
