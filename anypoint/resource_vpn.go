package anypoint

import (
	"context"
	"io"

	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"

	vpn "github.com/mulesoft-anypoint/anypoint-client-go/vpn"
)

func resourceVPN() *schema.Resource {
	return &schema.Resource{
		CreateContext: resourceVPNCreate,
		ReadContext:   resourceVPNRead,
		DeleteContext: resourceVPNDelete,
		// UpdateContext: resourceVPNUpdate,
		Description: `
		Creates and manages a ` + "`" + `vpn` + "`" + `component.
		`,
		Schema: map[string]*schema.Schema{
			"id": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: "The unique id of this vpn generated by the anypoint platform.",
			},
			"org_id": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: "The organization id where the vpn is defined.",
			},
			"vpc_id": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: "The vpc id where the vpn is defined.",
			},
			"name": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: "The name of the vpn.",
			},
			"remote_asn": {
				Type:        schema.TypeInt,
				Required:    true,
				ForceNew:    true,
				Description: "The unique remote Autonomous System Number",
			},
			"remote_ip_address": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: "The remote ip address of the vpn server",
			},
			"tunnel_configs": {
				Type:        schema.TypeList,
				Required:    true,
				ForceNew:    true,
				Description: "The configuration of the vpn tunnel",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"psk": {
							Type:        schema.TypeString,
							Required:    true,
							ForceNew:    true,
							Description: "The pre-shared key for authentication",
						},
						"ptp_cidr": {
							Type:             schema.TypeString,
							Required:         true,
							ForceNew:         true,
							Description:      "The peer to peer cidr block",
							ValidateDiagFunc: validation.ToDiagFunc(validation.IsCIDR),
						},
						"rekey_margin_in_seconds": {
							Type:        schema.TypeInt,
							Optional:    true,
							ForceNew:    true,
							Description: "The margin time in seconds for rekey process",
						},
						"rekey_fuzz": {
							Type:        schema.TypeInt,
							Optional:    true,
							ForceNew:    true,
							Description: "The percentage of the rekey window",
						},
					},
				},
			},
			"remote_networks": {
				Type:     schema.TypeList,
				Optional: true,
				ForceNew: true,
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
				Description: "The list of remote addresses",
			},
			"vpn_connection_status": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: "The status of the vpn connection",
			},
			"created_at": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: "The vpn creation time",
			},
			"local_asn": {
				Type:        schema.TypeInt,
				Optional:    true,
				ForceNew:    true,
				Description: "The local Autonomous System Number",
			},
			"vpn_tunnels": {
				Type:        schema.TypeList,
				Optional:    true,
				ForceNew:    true,
				Description: "List of vpn tunnels configurations",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"accepted_route_count": {
							Type:        schema.TypeInt,
							Optional:    true,
							Description: "The number of acccepted routes",
						},
						"last_status_change": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "The last status time the status has changed",
						},
						"local_external_ip_address": {
							Type:             schema.TypeString,
							Required:         true,
							Description:      "The tunnel ip address",
							ValidateDiagFunc: validation.ToDiagFunc(validation.IsIPAddress),
						},
						"local_ptp_ip_address": {
							Type:             schema.TypeString,
							Required:         true,
							Description:      "The local peer to peer ip address",
							ValidateDiagFunc: validation.ToDiagFunc(validation.IsIPAddress),
						},
						"remote_ptp_ip_address": {
							Type:             schema.TypeString,
							Required:         true,
							Description:      "The remote peer to peer ip address",
							ValidateDiagFunc: validation.ToDiagFunc(validation.IsIPAddress),
						},
						"psk": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "The pre-shared key",
						},
						"status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "The status of this vpn tunnel",
						},
						"status_message": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "The status message of this vpn tunnel",
						},
					},
				},
			},
			"failed_reason": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: "The error message if the vpn fails",
			},
			"update_available": {
				Type:        schema.TypeBool,
				Computed:    true,
				Description: "Activated if an update is available",
			},
		},
		Importer: &schema.ResourceImporter{
			StateContext: schema.ImportStatePassthroughContext,
		},
	}
}

func resourceVPNCreate(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics
	pco := m.(ProviderConfOutput)
	orgid := d.Get("org_id").(string)
	vpcid := d.Get("vpc_id").(string)
	name := d.Get("name").(string)
	authctx := getVPNAuthCtx(ctx, &pco)
	//prepare request body
	body := newVPNBody(d)
	//perform request
	res, httpr, err := pco.vpnclient.DefaultApi.OrganizationsOrgIdVpcsVpcIdIpsecPost(authctx, orgid, vpcid).VpnPostReqBody(*body).Execute()
	if err != nil {
		var details string
		if httpr != nil && httpr.StatusCode >= 400 {
			defer httpr.Body.Close()
			b, _ := io.ReadAll(httpr.Body)
			details = string(b)
		} else {
			details = err.Error()
		}
		diags := append(diags, diag.Diagnostic{
			Severity: diag.Error,
			Summary:  "Unable to create vpn " + name,
			Detail:   details,
		})
		return diags
	}
	defer httpr.Body.Close()
	d.SetId(res.GetId())
	return resourceVPNRead(ctx, d, m)
}

func resourceVPNRead(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics
	pco := m.(ProviderConfOutput)
	orgid := d.Get("org_id").(string)
	vpcid := d.Get("vpc_id").(string)
	vpnid := d.Id()
	if isComposedResourceId(vpnid) {
		orgid, vpcid, vpnid = decomposeVPNId(d)
	}
	authctx := getVPNAuthCtx(ctx, &pco)
	//perform request
	req := pco.vpnclient.DefaultApi.OrganizationsOrgIdVpcsVpcIdIpsecVpnIdGet(authctx, orgid, vpcid, vpnid)
	res, httpr, err := req.Execute()
	if err != nil {
		var details string
		if httpr != nil && httpr.StatusCode >= 400 {
			defer httpr.Body.Close()
			b, _ := io.ReadAll(httpr.Body)
			details = string(b)
		} else {
			details = err.Error()
		}
		diags := append(diags, diag.Diagnostic{
			Severity: diag.Error,
			Summary:  "Unable to get vpn " + vpnid,
			Detail:   details,
		})
		return diags
	}
	defer httpr.Body.Close()
	//process data
	vpcinstance, err := flattenVPNData(&res)
	if err != nil {
		diags := append(diags, diag.Diagnostic{
			Severity: diag.Error,
			Summary:  "Unable to parse data for vpn " + vpnid,
			Detail:   err.Error(),
		})
		return diags
	}
	//save in data source schema
	if err := setVPNCoreAttributesToResourceData(d, vpcinstance); err != nil {
		diags := append(diags, diag.Diagnostic{
			Severity: diag.Error,
			Summary:  "Unable to set data for vpn " + vpnid,
			Detail:   err.Error(),
		})
		return diags
	}
	//set identifiers params
	d.SetId(vpnid)
	d.Set("vpc_id", vpcid)
	d.Set("org_id", orgid)

	return diags
}

func resourceVPNDelete(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics
	pco := m.(ProviderConfOutput)
	orgid := d.Get("org_id").(string)
	vpcid := d.Get("vpc_id").(string)
	vpnid := d.Id()
	authctx := getVPNAuthCtx(ctx, &pco)
	//perform request
	httpr, err := pco.vpnclient.DefaultApi.OrganizationsOrgIdVpcsVpcIdIpsecVpnIdDelete(authctx, orgid, vpcid, vpnid).Execute()
	if err != nil {
		var details string
		if httpr != nil && httpr.StatusCode >= 400 {
			defer httpr.Body.Close()
			b, _ := io.ReadAll(httpr.Body)
			details = string(b)
		} else {
			details = err.Error()
		}
		diags := append(diags, diag.Diagnostic{
			Severity: diag.Error,
			Summary:  "Unable to delete vpn " + vpnid,
			Detail:   details,
		})
		return diags
	}
	defer httpr.Body.Close()
	// d.SetId("") is automatically called assuming delete returns no errors, but
	// it is added here for explicitness.
	d.SetId("")

	return diags
}

/*
 * Creates a new VPN Requestbody struct from the resource data schema
 */
func newVPNBody(d *schema.ResourceData) *vpn.VpnPostReqBody {
	body := vpn.NewVpnPostReqBodyWithDefaults()
	body.SetName(d.Get("name").(string))
	body.SetRemoteAsn(int32(d.Get("remote_asn").(int)))
	body.SetRemoteIpAddress(d.Get("remote_ip_address").(string))

	//preparing remote_networks
	rn := d.Get("remote_networks").([]interface{})
	remote_networks := make([]string, len(rn))
	for index, e := range rn {
		remote_networks[index] = e.(string)
	}
	body.SetRemoteNetworks(remote_networks)
	//preparing tunnel_configs
	tc := d.Get("tunnel_configs").([]interface{})
	tunnel_configs := make([]vpn.TunnelConfig, len(tc))
	for index, tunnel_config := range tc {
		tunnel_configs[index] = *vpn.NewTunnelConfig(tunnel_config.(map[string]interface{})["psk"].(string), tunnel_config.(map[string]interface{})["ptp_cidr"].(string))
	}
	body.SetTunnelConfigs(tunnel_configs)

	return body
}

/*
 * Returns authentication context (includes authorization header)
 */
func getVPNAuthCtx(ctx context.Context, pco *ProviderConfOutput) context.Context {
	tmp := context.WithValue(ctx, vpn.ContextAccessToken, pco.access_token)
	return context.WithValue(tmp, vpn.ContextServerIndex, pco.server_index)
}

func decomposeVPNId(d *schema.ResourceData, separator ...string) (string, string, string) {
	s := DecomposeResourceId(d.Id(), separator...)
	return s[0], s[1], s[2]
}
