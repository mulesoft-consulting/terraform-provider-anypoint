package anypoint

import (
	"context"
	"io"
	"strconv"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/mulesoft-anypoint/anypoint-client-go/dlb"
)

func dataSourceDLBs() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceDLBsRead,
		Description: `
		Reads all ` + "`" + `dedicated load balancer` + "`" + ` instances in a given VPC.
		`,
		Schema: map[string]*schema.Schema{
			"org_id": {
				Type:        schema.TypeString,
				Description: "The organization id where the dlbs are defined.",
				Required:    true,
			},
			"vpc_id": {
				Type:        schema.TypeString,
				Description: "the vpc id",
				Required:    true,
			},
			"dlbs": {
				Type:        schema.TypeList,
				Description: "List of dlbs defined in the given organization and vpc",
				Computed:    true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "The unique id of this dlb generated by the anypoint platform.",
						},
						"vpc_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "The vpc id",
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "The name of the dlb.",
						},
						"domain": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "The domain name of this dlb",
						},
						"state": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "The desired state, possible values: 'started', 'stopped' or 'restarted'",
						},
						"deployment_id": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"instance_config": {
							Type:     schema.TypeMap,
							Computed: true,
						},
						"ip_addresses": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: "List of static IP addresses for this dlb",
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
						"ip_whitelist": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: "CIDR blocks to allow connections from",
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
						"ip_allowlist": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: "CIDR blocks to allow connections from",
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
						"http_mode": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "Specifies whether the Load Balancer listens for HTTP requests on port 80. If set to redirect, all HTTP requests will be redirected to HTTPS. possible values: 'on', 'off' or 'redirect'",
						},
						"default_ssl_endpoint": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: "The default certificate that will be served for requests not using SNI, or requesting a non-existing certificate",
						},
						"ssl_endpoints": {
							Type:     schema.TypeSet,
							Computed: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"private_key_digest": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: "The private key checksum generated by the anypoint platform.",
									},
									"public_key_label": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: "The label of the public key.",
									},
									"public_key_digest": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: "The public key checksum generated by the anypoint platform.",
									},
									"public_key_cn": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: "The common name of the public key.",
									},
									"private_key_label": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: "The label of the private key.",
									},
									"verify_client_mode": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: "Whether to enable client verification or not, possible values: 'off' or 'on'",
									},
									"mappings": {
										Type:        schema.TypeList,
										Computed:    true,
										Description: "List of dlb mappings.",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"input_uri": {
													Type:     schema.TypeString,
													Computed: true,
												},
												"app_name": {
													Type:     schema.TypeString,
													Computed: true,
												},
												"app_uri": {
													Type:     schema.TypeString,
													Computed: true,
												},
												"upstream_protocol": {
													Type:     schema.TypeString,
													Computed: true,
												},
											},
										},
									},
								},
							},
						},
						"static_ips_disabled": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: "Whether to disable static ips for this dlb.",
						},
						"workers": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: "The number of workers for this dlb.",
						},
						"default_cipher_suite": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "The default cipher suite used by this dlb.",
						},
						"keep_url_encoding": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: "Whether to keep url encoding for this dlb.",
						},
						"tlsv1": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: "Whether to activate TLS v1 for this dlb.",
						},
						"upstream_tlsv12": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: "Whether to activate TLS v1.2 for this dlb upstream.",
						},
						"proxy_read_timeout": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: "The proxy read timeout",
						},
						"ip_addresses_info": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: "List of IP addresses information for the Load Balancer",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"ip": {
										Type:     schema.TypeString,
										Computed: true,
									},
									"status": {
										Type:     schema.TypeString,
										Computed: true,
									},
									"static_ip": {
										Type:     schema.TypeBool,
										Computed: true,
									},
								},
							},
						},
						"double_static_ips": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: "True if DLB will use double static IPs when restarting",
						},
						"enable_streaming": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: "Setting this to true will disable request buffering at the DLB, thereby enabling streaming",
						},
						"forward_client_certificate": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: "Setting this to true will forward any incoming client certificates to upstream application",
						},
					},
				},
			},
			"total": {
				Type:        schema.TypeInt,
				Description: "The total number of available results",
				Computed:    true,
			},
		},
	}
}

func dataSourceDLBsRead(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics
	pco := m.(ProviderConfOutput)
	orgid := d.Get("org_id").(string)
	vpcid := d.Get("vpc_id").(string)
	authctx := getDLBAuthCtx(ctx, &pco)
	//request dlb
	res, httpr, err := pco.dlbclient.DefaultApi.OrganizationsOrgIdVpcsVpcIdLoadbalancersGet(authctx, orgid, vpcid).Execute()
	if err != nil {
		var details string
		if httpr != nil && httpr.StatusCode >= 400 {
			defer httpr.Body.Close()
			b, _ := io.ReadAll(httpr.Body)
			details = string(b)
		} else {
			details = err.Error()
		}
		diags := append(diags, diag.Diagnostic{
			Severity: diag.Error,
			Summary:  "Unable to Get DLBs for org " + orgid + " and vpc " + vpcid,
			Detail:   details,
		})
		return diags
	}
	defer httpr.Body.Close()
	//process data
	dlbs := flattenDLBsData(res.GetData())
	//save in data source schema
	if err := d.Set("dlbs", dlbs); err != nil {
		diags = append(diags, diag.Diagnostic{
			Severity: diag.Error,
			Summary:  "Unable to set DLBs for org " + orgid + " and vpc " + vpcid,
			Detail:   err.Error(),
		})
		return diags
	}

	if err := d.Set("total", res.GetTotal()); err != nil {
		diags = append(diags, diag.Diagnostic{
			Severity: diag.Error,
			Summary:  "Unable to set total number DLBs for org " + orgid + " and vpc " + vpcid,
			Detail:   err.Error(),
		})
		return diags
	}

	d.SetId(strconv.FormatInt(time.Now().Unix(), 10))

	return diags
}

/*
 * Transforms a list of dlb.Dlb objects to the dataSourceDLBs schema
 */
func flattenDLBsData(dlbs []dlb.Dlb) []interface{} {
	result := make([]interface{}, len(dlbs))
	for i, dlb := range dlbs {
		item := flattenDLBData(&dlb)
		result[i] = item
	}
	return result
}
