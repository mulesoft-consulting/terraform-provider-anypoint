package anypoint

import (
	"context"
	"errors"
	"fmt"
	"io"

	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	connected_app "github.com/mulesoft-anypoint/anypoint-client-go/connected_app"
)

func dataSourceConnectedApp() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceConnectedAppRead,
		Description: `
		Reads a single ` + "`" + `connected app` + "`" + ` in your organization.
		`,
		Schema: map[string]*schema.Schema{
			"id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: "The unique id of this connected app generated by the anypoint platform.",
			},
			"org_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: "The organization id where the connected app's owner is defined.",
			},
			"name": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: "The name of the connected app.",
			},
			"secret": {
				Type:        schema.TypeString,
				Computed:    true,
				Sensitive:   true,
				Description: "The secret of the connected app.",
			},
			"user_id": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: "The id of the user who owns the connected app",
			},
			"grant_types": {
				Type:     schema.TypeList,
				Computed: true,
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
				Description: `
				List of grant types. For "on its own behalf" connected apps the only allowed value is "client_credentials". 
				The allowed values for "on behalf of user" connected apps are: "authorization_code", "refresh_token",
				"password", and "urn:ietf:params:oauth:grant-type:jwt-bearer".
				`,
			},
			"redirect_uris": {
				Description: "Configure which URIs users may be directed to after authorization",
				Type:        schema.TypeList,
				Computed:    true,
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},
			"scope": {
				Description: "The scopes this connected app has authorization to work on",
				Type:        schema.TypeList,
				Computed:    true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"scope": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "Scope",
						},
						"org_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "The id of the business group the scope is valid. Only required for particular scopes",
						},
						"env_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "The id of the environment the scope is valid. Only required for particular scopes",
						},
					},
				},
			},
			"public_keys": {
				Type:     schema.TypeList,
				Computed: true,
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
				Description: `
				Application public key (PEM format). Used to validate JWT authorization grants.
				Required when grant type jwt-bearer is selected.
				`,
			},
			"client_uri": {
				Type:     schema.TypeString,
				Computed: true,
				Description: `
				Users can visit this URL to learn more about your app. Required for "on behalf of user" 
				connected apps
				`,
			},
			"enabled": {
				Type:        schema.TypeBool,
				Computed:    true,
				Description: "True if the connected app is enabled",
			},
			"audience": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: "Who can use this application",
			},
			"policy_uri": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"tos_uri": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"cert_expiry": {
				Type:     schema.TypeString,
				Computed: true,
			},
		},
	}
}

func dataSourceConnectedAppRead(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics
	pco := m.(ProviderConfOutput)
	connappid := d.Get("id").(string)
	orgid := d.Get("org_id").(string)
	authctx := getConnectedAppAuthCtx(ctx, &pco)
	//request connected app
	res, httpr, err := pco.connectedappclient.DefaultApi.GetConnectedApp(authctx, orgid, connappid).Execute()
	if err != nil {
		var details string
		if httpr != nil && httpr.StatusCode >= 400 {
			defer httpr.Body.Close()
			b, _ := io.ReadAll(httpr.Body)
			details = string(b)
		} else {
			details = err.Error()
		}
		diags := append(diags, diag.Diagnostic{
			Severity: diag.Error,
			Summary:  "Unable to read connected-app " + connappid,
			Detail:   details,
		})
		return diags
	}
	defer httpr.Body.Close()
	//process data
	connappinstance := flattenConnectedAppData(res)
	// Is it a "on behalf of user" connected apps?
	if granttypes := connappinstance["grant_types"]; granttypes != nil && StringInSlice(granttypes.([]string), "client_credentials", true) {
		// Yes, then load the scopes using connapps/{connapp_id}/scopes
		if scopes, err := readScopesByConnectedAppId(authctx, orgid, connappid, m); err != nil {
			diags := append(diags, diag.Diagnostic{
				Severity: diag.Error,
				Summary:  "Unable to read connected-app " + connappid + " scopes",
				Detail:   err.Error(),
			})
			return diags
		} else {
			connappinstance["scope"] = scopes
		}
	}
	//save in data source schema
	if err := setConnectedAppAttributesToResourceData(d, connappinstance); err != nil {
		diags := append(diags, diag.Diagnostic{
			Severity: diag.Error,
			Summary:  "Unable to set connected-app " + connappid,
			Detail:   err.Error(),
		})
		return diags
	}
	d.SetId(connappid)
	return diags
}

func readScopesByConnectedAppId(ctx context.Context, orgid string, connappid string, m interface{}) ([]interface{}, error) {
	pco := m.(ProviderConfOutput)
	authctx := getConnectedAppAuthCtx(ctx, &pco)
	limit := 500
	res, httpr, err := pco.connectedappclient.DefaultApi.GetConnectedAppScopes(authctx, orgid, connappid).Limit(int32(limit)).Execute()
	if err != nil {
		var details string
		if httpr != nil && httpr.StatusCode >= 400 {
			b, _ := io.ReadAll(httpr.Body)
			details = string(b)
		} else {
			details = err.Error()
		}

		return nil, errors.New(details)
	}
	defer httpr.Body.Close()
	//process data
	return flattenConnectedAppScopesData(res), nil
}

/*
* Copies the given connected app instance into the given resource data
* @param d *schema.ResourceData the resource data schema
* @param connappitem map[string]interface{} the connected app instance
 */
func setConnectedAppAttributesToResourceData(d *schema.ResourceData, connappitem map[string]interface{}) error {
	attributes := getConnectedAppAttributes()
	if connappitem != nil {
		for _, attr := range attributes {
			if err := d.Set(attr, connappitem[attr]); err != nil {
				return fmt.Errorf("unable to set Connected App attribute %s\n details: %s", attr, err)
			}
		}
	}
	return nil
}

/*
* Transforms a connected_app.ConnectedAppRespExt object to the dataSourceConnectedApp schema
* @param connappitem *connected_app.ConnectedAppRespExt the connected app struct
* @return the connected app mapped struct
 */
func flattenConnectedAppData(connappitem *connected_app.ConnectedAppRespExt) map[string]interface{} {
	item := make(map[string]interface{})
	if connappitem == nil { // if empty
		return item
	}
	// connected_app.ConnectedAppCore attributes
	if val, ok := connappitem.GetClientNameOk(); ok {
		item["name"] = val
	}
	if val, ok := connappitem.GetGrantTypesOk(); ok {
		item["grant_types"] = val
	}
	if val, ok := connappitem.GetPublicKeysOk(); ok {
		item["public_keys"] = val
	}
	if val, ok := connappitem.GetRedirectUrisOk(); ok {
		item["redirect_uris"] = val
	}
	if val, ok := connappitem.GetClientUriOk(); ok {
		item["client_uri"] = val
	}
	if val, ok := connappitem.GetAudienceOk(); ok {
		item["audience"] = val
	}

	if val, ok := connappitem.GetScopesOk(); ok {
		scopes := make([]interface{}, len(val))
		for j, scope := range connappitem.GetScopes() {
			s := make(map[string]interface{})
			s["scope"] = scope
			scopes[j] = s
		}
		item["scope"] = scopes
	}

	// connected_app.ConnectedAppRespExt extra attributes
	if val, ok := connappitem.GetClientIdOk(); ok {
		item["id"] = val
	}
	if val, ok := connappitem.GetClientSecretOk(); ok {
		item["secret"] = val
	}
	if val, ok := connappitem.GetOwnerOrgIdOk(); ok {
		item["org_id"] = val
	}
	if val, ok := connappitem.GetOwnerUserIdOk(); ok {
		item["user_id"] = val
	}
	if val, ok := connappitem.GetEnabledOk(); ok {
		item["enabled"] = val
	}
	if val, ok := connappitem.GetPolicyUriOk(); ok {
		item["policy_uri"] = val
	}
	if val, ok := connappitem.GetTosUriOk(); ok {
		item["tos_uri"] = val
	}
	if val, ok := connappitem.GetCertExpiryOk(); ok {
		item["cert_expiry"] = val
	}

	return item
}

func flattenConnectedAppScopesData(scopes *connected_app.GetConnectedAppScopes200Response) []interface{} {
	if scopes != nil {
		scopes_list := make([]interface{}, len(scopes.GetData()))

		for j, scope := range scopes.GetData() {
			s := make(map[string]interface{})

			s["scope"] = scope.GetScope()

			if contextparams, ok := scope.GetContextParamsOk(); ok {
				if org_id, org_ok := contextparams.GetOrgOk(); org_ok {
					s["org_id"] = org_id
				}

				if env_id, env_ok := contextparams.GetEnvIdOk(); env_ok {
					s["env_id"] = env_id
				}
			}

			scopes_list[j] = s
		}

		return scopes_list
	}

	return nil
}

func getConnectedAppAttributes() []string {
	attributes := [...]string{
		"id", "name", "secret", "org_id", "user_id", "grant_types", "redirect_uris",
		"scope", "public_keys", "client_uri", "enabled", "audience", "policy_uri", "tos_uri", "cert_expiry",
	}
	return attributes[:]
}
