package anypoint

import (
	"context"
	"io"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/mulesoft-anypoint/anypoint-client-go/idp"
)

func resourceSAML() *schema.Resource {
	return &schema.Resource{
		CreateContext: resourceSAMLCreate,
		ReadContext:   resourceSAMLRead,
		UpdateContext: resourceSAMLUpdate,
		DeleteContext: resourceSAMLDelete,
		Description: `
		Creates an ` + "`" + `identity provider` + "`" + ` SAML type configuration in your account.
		`,
		Schema: map[string]*schema.Schema{
			"last_updated": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: "The last time this resource has been updated locally.",
			},
			"id": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: "The unique id of this identity provider generated by the anypoint platform.",
			},
			"org_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: "The master organization id where the team is defined.",
			},
			"provider_id": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: "The identity provider unique generated id",
			},
			"name": {
				Type:        schema.TypeString,
				Required:    true,
				Description: "The name of the identity provider",
			},
			"type": {
				Type:        schema.TypeMap,
				Computed:    true,
				Description: "The type of the identity provider, contains description and the name of the type of the provider (saml or oidc)",
			},
			"saml": {
				Type:        schema.TypeSet,
				Description: "The description of identity provider specific for SAML types",
				Required:    true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"issuer": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "The provider issuer",
						},
						"audience": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "The provider audience",
						},
						"public_key": {
							Type:        schema.TypeList,
							Required:    true,
							Description: "The list of public keys",
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
						"claims_mapping_email_attribute": {
							Type:        schema.TypeString,
							Optional:    true,
							Default:     "",
							Description: "Field name in the SAML AttributeStatements that maps to Email. By default, the email attribute in the SAML assertion is used.",
						},
						"claims_mapping_group_attribute": {
							Type:        schema.TypeString,
							Optional:    true,
							Default:     "",
							Description: "Field name in the SAML AttributeStatements that maps to Group.",
						},
						"claims_mapping_lastname_attribute": {
							Type:        schema.TypeString,
							Optional:    true,
							Default:     "",
							Description: "Field name in the SAML AttributeStatements that maps to Last Name. By default, the lastname attribute in the SAML assertion is used.",
						},
						"claims_mapping_username_attribute": {
							Type:        schema.TypeString,
							Optional:    true,
							Default:     "",
							Description: "Field name in the SAML AttributeStatements that maps to username. By default, the NameID attribute in the SAML assertion is used.",
						},
						"claims_mapping_firstname_attribute": {
							Type:        schema.TypeString,
							Optional:    true,
							Default:     "",
							Description: "Field name in the SAML AttributeStatements that maps to First Name. By default, the firstname attribute in the SAML assertion is used.",
						},
						"sp_initiated_sso_enabled": {
							Type:        schema.TypeBool,
							Optional:    true,
							Default:     true,
							Description: "True if the Service Provider initiated SSO enabled",
						},
						"idp_initiated_sso_enabled": {
							Type:        schema.TypeBool,
							Optional:    true,
							Default:     true,
							Description: "True if the Identity Provider initiated SSO enabled",
						},
						"require_encrypted_saml_assertions": {
							Type:        schema.TypeBool,
							Optional:    true,
							Default:     false,
							Description: "True if the encryption of saml assertions requirement is enabled",
						},
					},
				},
			},
			"sp_sign_on_url": {
				Type:        schema.TypeString,
				Required:    true,
				Description: "The identity provider's sign on url",
			},
			"sp_sign_out_url": {
				Type:        schema.TypeString,
				Required:    true,
				Description: "The identity provider's sign out url, only available for SAML",
			},
		},
		Importer: &schema.ResourceImporter{
			StateContext: schema.ImportStatePassthroughContext,
		},
	}
}

func resourceSAMLCreate(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics
	pco := m.(ProviderConfOutput)
	orgid := d.Get("org_id").(string)
	authctx := getIDPAuthCtx(ctx, &pco)
	//prepare request
	body, errDiags := newSAMLPostBody(d)
	if errDiags.HasError() {
		diags = append(diags, errDiags...)
		return diags
	}
	//perform request
	res, httpr, err := pco.idpclient.DefaultApi.OrganizationsOrgIdIdentityProvidersPost(authctx, orgid).IdpPostBody(*body).Execute()
	if err != nil {
		var details string
		if httpr != nil && httpr.StatusCode >= 400 {
			defer httpr.Body.Close()
			b, _ := io.ReadAll(httpr.Body)
			details = string(b)
		} else {
			details = err.Error()
		}
		diags = append(diags, diag.Diagnostic{
			Severity: diag.Error,
			Summary:  "Unable to create OIDC provider for org " + orgid,
			Detail:   details,
		})
		return diags
	}
	defer httpr.Body.Close()
	d.SetId(res.GetProviderId())
	return resourceSAMLRead(ctx, d, m)
}

func resourceSAMLRead(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics
	pco := m.(ProviderConfOutput)
	idpid := d.Id()
	orgid := d.Get("org_id").(string)
	if isComposedResourceId(idpid) {
		orgid, idpid = decomposeSAMLId(d)
	}
	authctx := getIDPAuthCtx(ctx, &pco)
	//perform request
	res, httpr, err := pco.idpclient.DefaultApi.OrganizationsOrgIdIdentityProvidersIdpIdGet(authctx, orgid, idpid).Execute()
	if err != nil {
		var details string
		if httpr != nil && httpr.StatusCode >= 400 {
			defer httpr.Body.Close()
			b, _ := io.ReadAll(httpr.Body)
			details = string(b)
		} else {
			details = err.Error()
		}
		diags := append(diags, diag.Diagnostic{
			Severity: diag.Error,
			Summary:  "Unable to read SAML identity provider " + idpid + " in org " + orgid,
			Detail:   details,
		})
		return diags
	}
	defer httpr.Body.Close()
	//process data
	idpinstance := flattenIDPData(&res)
	//save in data source schema
	if err := setIDPAttributesToResourceData(d, idpinstance); err != nil {
		diags := append(diags, diag.Diagnostic{
			Severity: diag.Error,
			Summary:  "Unable to set IDP " + idpid + " in org " + orgid,
			Detail:   err.Error(),
		})
		return diags
	}

	d.SetId(idpid)
	d.Set("org_id", orgid)

	return diags
}

func resourceSAMLUpdate(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics
	pco := m.(ProviderConfOutput)
	idpid := d.Id()
	orgid := d.Get("org_id").(string)
	//check for changes
	if d.HasChanges(getIDPAttributes()...) {
		authctx := getIDPAuthCtx(ctx, &pco)
		//prepare request
		body, errDiags := newSAMLPatchBody(d)
		if errDiags.HasError() {
			diags = append(diags, errDiags...)
			return diags
		}
		//perform request
		_, httpr, err := pco.idpclient.DefaultApi.OrganizationsOrgIdIdentityProvidersIdpIdPatch(authctx, orgid, idpid).IdpPatchBody(*body).Execute()
		if err != nil {
			var details string
			if httpr != nil && httpr.StatusCode >= 400 {
				defer httpr.Body.Close()
				b, _ := io.ReadAll(httpr.Body)
				details = string(b)
			} else {
				details = err.Error()
			}
			diags := append(diags, diag.Diagnostic{
				Severity: diag.Error,
				Summary:  "Unable to Update IDP " + idpid + " in org " + orgid,
				Detail:   details,
			})
			return diags
		}
		defer httpr.Body.Close()
		d.Set("last_updated", time.Now().Format(time.RFC850))
		return resourceSAMLRead(ctx, d, m)
	}

	return diags
}

func resourceSAMLDelete(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics
	pco := m.(ProviderConfOutput)
	idpid := d.Id()
	orgid := d.Get("org_id").(string)
	authctx := getIDPAuthCtx(ctx, &pco)
	//perform request
	httpr, err := pco.idpclient.DefaultApi.OrganizationsOrgIdIdentityProvidersIdpIdDelete(authctx, orgid, idpid).Execute()
	if err != nil {
		var details string
		if httpr != nil && httpr.StatusCode >= 400 {
			defer httpr.Body.Close()
			b, _ := io.ReadAll(httpr.Body)
			details = string(b)
		} else {
			details = err.Error()
		}
		diags := append(diags, diag.Diagnostic{
			Severity: diag.Error,
			Summary:  "Unable to Delete OIDC provider " + idpid,
			Detail:   details,
		})
		return diags
	}
	defer httpr.Body.Close()
	// d.SetId("") is automatically called assuming delete returns no errors, but
	// it is added here for explicitness.
	d.SetId("")

	return diags
}

/* Prepares the body required to post an OIDC provider*/
func newSAMLPostBody(d *schema.ResourceData) (*idp.IdpPostBody, diag.Diagnostics) {
	var diags diag.Diagnostics

	name := d.Get("name").(string)
	saml_input := d.Get("saml")
	sp_sign_on_url := d.Get("sp_sign_on_url").(string)
	sp_sign_out_url := d.Get("sp_sign_out_url").(string)

	body := idp.NewIdpPostBody()

	saml_type := idp.NewIdpPostBodyType()
	saml_type.SetName("saml")
	saml_type.SetDescription("SAML 2.0")

	saml := idp.NewSaml1()

	if saml_input != nil {
		set := saml_input.(*schema.Set)
		list := set.List()
		if set.Len() > 0 {
			item := list[0]
			data := item.(map[string]interface{})
			if issuer, ok := data["issuer"]; ok {
				saml.SetIssuer(issuer.(string))
			}
			if audience, ok := data["audience"]; ok {
				saml.SetAudience(audience.(string))
			}
			if public_key, ok := data["public_key"]; ok {
				l := public_key.([]interface{})
				keys := make([]string, len(l))
				for i, k := range l {
					keys[i] = k.(string)
				}
				saml.SetPublicKey(keys)
			}
			//parsing claims
			claims := idp.NewClaimsMapping2()
			if claims_mapping_email_attribute, ok := data["claims_mapping_email_attribute"]; ok {
				claims.SetEmailAttribute(claims_mapping_email_attribute.(string))
			}
			if claims_mapping_group_attribute, ok := data["claims_mapping_group_attribute"]; ok {
				claims.SetGroupAttribute(claims_mapping_group_attribute.(string))
			}
			if claims_mapping_lastname_attribute, ok := data["claims_mapping_lastname_attribute"]; ok {
				claims.SetLastnameAttribute(claims_mapping_lastname_attribute.(string))
			}
			if claims_mapping_username_attribute, ok := data["claims_mapping_username_attribute"]; ok {
				claims.SetUsernameAttribute(claims_mapping_username_attribute.(string))
			}
			if claims_mapping_firstname_attribute, ok := data["claims_mapping_firstname_attribute"]; ok {
				claims.SetFirstnameAttribute(claims_mapping_firstname_attribute.(string))
			}
			saml.SetClaimsMapping(*claims)

			if sp_initiated_sso_enabled, ok := data["sp_initiated_sso_enabled"]; ok {
				saml.SetSpInitiatedSsoEnabled(sp_initiated_sso_enabled.(bool))
			}
			if idp_initiated_sso_enabled, ok := data["idp_initiated_sso_enabled"]; ok {
				saml.SetIdpInitiatedSsoEnabled(idp_initiated_sso_enabled.(bool))
			}
			if require_encrypted_saml_assertions, ok := data["require_encrypted_saml_assertions"]; ok {
				saml.SetRequireEncryptedSamlAssertions(require_encrypted_saml_assertions.(bool))
			}
		}
	}

	sp := idp.NewServiceProvider1()
	sp_urls := idp.NewUrls4()
	sp_urls.SetSignOn(sp_sign_on_url)
	sp_urls.SetSignOut(sp_sign_out_url)
	sp.SetUrls(*sp_urls)
	body.SetServiceProvider(*sp)
	body.SetSaml(*saml)
	body.SetName(name)
	body.SetType(*saml_type)

	return body, diags
}

/* Prepares the body required to patch an OIDC provider*/
func newSAMLPatchBody(d *schema.ResourceData) (*idp.IdpPatchBody, diag.Diagnostics) {
	var diags diag.Diagnostics

	name := d.Get("name").(string)
	saml_input := d.Get("saml")
	sp_sign_on_url := d.Get("sp_sign_on_url").(string)
	sp_sign_out_url := d.Get("sp_sign_out_url").(string)

	body := idp.NewIdpPatchBody()

	saml_type := idp.NewIdpPatchBodyType()
	saml_type.SetDescription("SAML 2.0")

	saml := idp.NewSaml1()

	if saml_input != nil {
		set := saml_input.(*schema.Set)
		list := set.List()
		if set.Len() > 0 {
			item := list[0]
			data := item.(map[string]interface{})
			if issuer, ok := data["issuer"]; ok {
				saml.SetIssuer(issuer.(string))
			}
			if audience, ok := data["audience"]; ok {
				saml.SetAudience(audience.(string))
			}
			if public_key, ok := data["public_key"]; ok {
				l := public_key.([]interface{})
				keys := make([]string, len(l))
				for i, k := range l {
					keys[i] = k.(string)
				}
				saml.SetPublicKey(keys)
			}
			//parsing claims
			claims := idp.NewClaimsMapping2()
			if claims_mapping_email_attribute, ok := data["claims_mapping_email_attribute"]; ok {
				claims.SetEmailAttribute(claims_mapping_email_attribute.(string))
			}
			if claims_mapping_group_attribute, ok := data["claims_mapping_group_attribute"]; ok {
				claims.SetGroupAttribute(claims_mapping_group_attribute.(string))
			}
			if claims_mapping_lastname_attribute, ok := data["claims_mapping_lastname_attribute"]; ok {
				claims.SetLastnameAttribute(claims_mapping_lastname_attribute.(string))
			}
			if claims_mapping_username_attribute, ok := data["claims_mapping_username_attribute"]; ok {
				claims.SetUsernameAttribute(claims_mapping_username_attribute.(string))
			}
			if claims_mapping_firstname_attribute, ok := data["claims_mapping_firstname_attribute"]; ok {
				claims.SetFirstnameAttribute(claims_mapping_firstname_attribute.(string))
			}
			saml.SetClaimsMapping(*claims)

			if sp_initiated_sso_enabled, ok := data["sp_initiated_sso_enabled"]; ok {
				saml.SetSpInitiatedSsoEnabled(sp_initiated_sso_enabled.(bool))
			}
			if idp_initiated_sso_enabled, ok := data["idp_initiated_sso_enabled"]; ok {
				saml.SetIdpInitiatedSsoEnabled(idp_initiated_sso_enabled.(bool))
			}
			if require_encrypted_saml_assertions, ok := data["require_encrypted_saml_assertions"]; ok {
				saml.SetRequireEncryptedSamlAssertions(require_encrypted_saml_assertions.(bool))
			}
		}
	}
	sp := idp.NewServiceProvider1()
	sp_urls := idp.NewUrls4()
	sp_urls.SetSignOn(sp_sign_on_url)
	sp_urls.SetSignOut(sp_sign_out_url)
	sp.SetUrls(*sp_urls)
	body.SetServiceProvider(*sp)
	body.SetSaml(*saml)
	body.SetName(name)
	body.SetType(*saml_type)

	return body, diags
}

func decomposeSAMLId(d *schema.ResourceData) (string, string) {
	s := DecomposeResourceId(d.Id())
	return s[0], s[1]
}
